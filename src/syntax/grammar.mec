Mech Grammar
===============================================================================

(Revised 12/19/2024)

╭────────┬─────────────────────────────────────────────────────╮
│ Symbol │   Semantics                                         │
├────────┼─────────────────────────────────────────────────────┤
│  "abc" │ input matches string literal "abc" (terminal)       │
│  p*    │ input matches `p` for 0 or more times (repetition)  │
│  p+    │ input mathces `p` for 1 or more times (repetition)  │
│  p?    │ input mathces `p` for 0 or 1 time (optional)        │
│ p1, p2 │ input matches `p1` followed by `p2` (sequence)      │
│ p1 | p2│ input matches `p1` or `p2` (ordered choice)         │
│  !!p   │ input matches `p`; never consume input (peek)       │
│  !p    │ input doesn't match `p`; never consume input (peek) │
│ (...)  │ common grouping                                     │
│ <...>  │ labeled grouping                                    │
╰────────┴─────────────────────────────────────────────────────╯


1. The Basics
-------------------------------------------------------------------------------

a) Characters

alpha = "a".."z" | "A".."Z";
digt = "0".."9";
emoji := emoji-grapheme+ ;
word := alpha+ ;
digit1 := digit+ ;
digit0 := digit* ;
bin-digit := "0" | "1" ;
hex-digit := digit | "a" .. "f" | "A" .. "F" ;
oct-digit := "0" .. "7" ;
number := digit1 ;

punctuation := period | exclamation | question | comma | colon | semicolon | quote | apostrophe ;
symbol := ampersand | bar | at | slash | hashtag | equal | backslash | tilde | plus | dash | asterisk | caret | underscore ;

grouping-sumbol := left-parenthesis | right-parenthesis | left-angle | right-angle | left-brace | right-brace | left-bracket | right-bracket ;
paragraph-symbol := ampersand | at | slash | backslash | asterisk | caret | underscore ;
escaped-char := backslash,  symbol | punctuation ;
text := (alpha | digit | space | tabe | escaped_char | punctuation | grouping_symbol | symbol)+ ;
paragraph-rest := (alpha | whitespace | digit | punctuation | paragraph-symbol | quote | emoij) ;
paragraph-starter := (alpha | digit | grouping-symbol | period | exclamation | question | comma | colon | semicolon | emoji) ;
space_tab := space | tab ;
list_separator := whitespace*, ",", whitespace* ;
enum_separator := whitespace*, "|", whitespace* ;

emoji_grapheme := ?emoji_grapheme_literal? ;
forbidden_emoji := box_drawing | other_forbidden_shapes ;
emoji := emoji_grapheme+ ;

underscore_digit := underscore, digit ;
digit_sequence := digit, (underscore_digit | digit)* ;

b) Whiespace

carriage-newline := "\r\n" ;
newline := new-line-char | carriage-newline ;
whitespace := space | newline | tab ;

c) Identifiers

identifier := (alpha | emoji), (alpha | digit | symbol | emoji)* ;

d) Comments

comment-sigil := "--" | "//";
comment := (space | tab)*, comment-sigil, <text>, <!!newline> ;

2. Literals
-------------------------------------------------------------------------------

literal := (number | string | atom | boolean | empty), kind_annotation? ;

a) Boolean

boolean := true-literal | false-literal ;
true-literal := english-true-literal | true-symbol ;
false-literal := english-false-literal | false-symbol ;
true-symbol := "✓" ;
false-symbol := "✗" ;
english-true-literal := "true" ;
english-false-literal := "false" ;

b) Numbers

number := (integer-literal | hexadecimal-literal | octal-literal | binary-literal | decimal-literal | float-literal | rational-literal | scientific-literal) ;
integer-literal := digit+;
float-literal := "."?, digit+, "."?, digit* ;
decimal-literal := "0d", <digit+> ;
hexadecimal-literal := "0x", <hex-digit+> ;
octal-literal := "0o", <oct-digit+> ;
binary-literal := "0b", <bin-digit+> ;
scientific-literal := float-literal, "e", "-"?, float-literal ;
rational-literal := integer-literal, slash, integer-literal ;

c) Strings

string := quote, (!quote, text)*, quote ;

d) Atoms

atom := "`", identifier ;

e) Empty

empty := underscore+ ;

f) Kinds

kind_annotation := left_angle, kind, right_angle ;
kind := empty | atom | tuple | scalar | bracket | map | brace ;
kind_empty := underscore+ ;
kind_atom := "`", identifier ;
kind_map = "{", kind, ":", kind, "}" ;
kind_fxn := "(" kind (list_separator kind)* ")" "=" "(" kind (list_separator kind)* ")" ;
kind_brace = "{", list1(",",kind) "}", [":"], list0(",",literal) ;
kind_bracket = "[", list1(",",kind) "]", [":"], list0(",",literal) ;
kind_tuple = "(", list1(",",kind) ")" ;
kind_scalar := identifier ;

3. Structures
-------------------------------------------------------------------------------

structure := empty_set | empty_map | matrix | tuple | table | tuple_struct | record | map | set ;

a) Set

set := "{", list0(",",expression), "}" ;
empty_set ::= table_start, whitespace?, empty, whitespace?, table_end

b) Map

map := "{", mapping*, "}" ;
mapping := expression, ":", expression ;

c) Matrix

matrix_column := (space | tab)*, expression ;
matrix_row := (space | tab)*, table_column+, semicolon?, new_line? ;
matrix := matrix_start, box_drawing_char*, table_row, box_drawing_char*, matrix_end ;

d) Table

table := table_start, box_drawing_char*, table_header, box_drawing_char*, table_row, box_drawing_char*, table_end ;

binding := identifier, kind_annotation?, colon, expression;
table_column := (space | tab)*, expression ;
table_row := (space | tab)*, table_column+, semicolon?, new_line? ;
table_header := bar, <attribute+>, <bar>, space*, new_line? ;
field := identifier, [kind_annotation] ;

empty_table := table_start, empty?, table_end ;

e) Record

record := table_start, binding+, table_end ;

f) Tuple

tuple := "(", list0(",", expression), ")" ;
tuple_struct = atom, "(", expression, ")" ;

b) Pretty Print Tables

table-title := "│", identifier, ["+"], space, "(", number, space, "x", space, number, ")", {space}, "│", newline;
table-type := "U8"|"U16"|"U32"|"U64"|"U128"|"I8"|"I16"|"I32"|"I64"|"I128"|"F32"|"F64"|"Bool"|"String";
table-topline := "╭",{"-"}, "╮", newline ;
table-line := "╭" | "├" | "╰",{"-",["┼" | "┬" | "┴"],"-"},"╮" | "┤" | "╯", newline;
table-botline := "╰", {"-",["┴"],"-"}, "╯", newline;
table-label := "│" , [{identifier, {space}, "│"}], newline
table-output := table-line, table-title, table-line, [table-label],table-line, ["│", {table-type, {space}, "│"}, newline], {"│", {expressions, {space}, "│"}, newline},table-line;

3. Statements
-------------------------------------------------------------------------------

statement := variable_define | variable_assign | enum_define | fsm_declare | kind_define ;

a) Operators

split-operator := ">-" ;
flatten-operator := "-<" ;
define-operator := ":=" ;
assign-operator := "=";
add-assign-operator := "+=";
sub-assign-operator := "-=";
mul-assign-operator := "*=";
div-assign-operator := "/=";
exp-assign-operator := "^=";
op-assign-operator := add-assign-operator | sub-assign-operator | mul-assign-operator | div-assign-operator | exp-assign-operator ;
enum-separator := "|";

b) Statements

variable_assign := slice_ref, !define-opertor, assign_operator, expression ;
variable_define := var, define_operator, expression ;

split-table := (identifier | table), <!stmt-operator>, space*, split-operator, <space+>, <expression> ;
flatten-table := identifier, <!stmt-operator>, space*, flatten-operator, <space+>, <expression> ;

enum_define := "<", identifier, ">", define_operator, list1(enum_separator, enum_variant);
enum_variant := atom | identifier, enum_variant_kind? ;
enum_variant_kind := "(", kind_annotation, ")" ;

kind_define := "<", identifier, ">", define_operator, kind_annotation ;

op-assign := data, <!stmt-operator>, space*, op-assign-operator, <space+>, <expression> ;


4. Expressions
-------------------------------------------------------------------------------

expression := range_expression | formula ;

a) Math Operators

add := "+" ;
subtract := "-" ;
multiply := "*" ;
divide := "/" ;
exponent := "^" ;
add_sub_operator := add | subtract ;
mul_div_operator := multiply | divide ;
exponent_operator := exponent ;

b) Matrix Operators

matrix_solve := "\" ;
dot_product := "·" ;
cross_product := "⨯" ;
matrix-multiply := "**" ;
transpose := "'" ;
matrix_operator := matrix_multiply | matrix_solve | dot_product | cross_product ;

c) Comparison Operators

not-equal := "!=" | "¬=" | "≠" ;
equal-to := "==" ;
greater-than := ">" ;
less-than := "<" ;
greater-than-equal := ">=" | "≥" ;
less-than-equal := "<=" | "≤" ;
comparison-operator := not-equal | equal-to | greater-than-equal | greater-than | less-than-equal | less-than ;

d) Logic Operators

or := "|" ;
and := "&" ;
not := "!" | "¬" ;
xor := "xor" | "⊕" | "⊻" ;
logic-operator = and | or | xor;

e) Set Operators

union := "∪" ;
intersection := "∩" ;
difference := "∖" ;
complement := "∁" | "'" ;
subset := "⊆" ;
superset := "⊇" ;
proper-subset := "⊊" ;
proper-superset := "⊋" ;
element-of := "∈" ;
not-element-of := "∉" ;

f) Range Operators

range_inclusive := "..=" ;
range_exclusive := ".." ;
range_operator := range_inclusive | range_exclusive ;

g) Formulas

parenthetical_expression := left_parenthesis, formula, right_parenthesis ;
negate_factor := "-" factor ;
not_factor := "not" factor ;

formula := l1, (range_operator, l1)* ;
add_sub_operator := add | subtract ;
l1 := l2, (add_sub_operator, l2)* ;
l2 := l3, (mul_div_operator | matrix_operator, l3)* ;
l3 := l4, (exponent_operator, l4)* ;
l4 := l5, (logic_operator, l5)* ;
l5 := factor, (comparison_operator, factor)* ;

factor := (parenthetical_term | structure | fsm_pipe | function_call | literal | slice | var), transpose? ;

5. Functions
-------------------------------------------------------------------------------

function_define := identifier, "(", list0(list_separator function_arg), ")", "=", (function_out_args | function_out_arg), define_operator, list1((whitespace1 | statement_separator), statement), period ;
function_out_args := "(", list1(list_separator, function_arg),")" ;
function_out_arg := function_arg ;
function_arg := identifier, kind_annotation ;
argument_list := "(", list0(",", call_arg_with_biding | call_arg)

function_call := identifier, argument_list
call_arg_with_binding := identifier, colon, expression ;
call_arg := expression ;
var := identifier, kind_annotation? ;

fxn-call := identifier, left-parenthesis, <fxn-binding+>, <right-parenthesis> ;
fxn-define := left-bracket, fxn-output*, <right-bracket>, <space+>, <equal>, <space+>, <identifier>, <left-parenthesis>, <fxn-input*>, <right-parenthesis>, <newline>, <fxn-body> ;
fxn-output := identifier, <kind-annotation>, space*, comma?, space* ;
fxn-input := identifier, <kind-annotation>, space*, comma?, space* ;
fxn-body := indented-tfm+, whitespace* ;
fxn-binding := identifier, <colon>, <space+>, <expression | identifier | value>, space*, comma?, space* ;

6. Variable Slicing
-------------------------------------------------------------------------------

slice := identifier, subscript ;
slice_ref := identifier, subscript ;

subscript := (swizzle_subscript | dot_subscript_int | dot_subscript | bracket_subscript | brace_subscript)+ ; 

swizzle_subscript := ".", identifier, "," , list1(",", identifier) ;
dot_subscript := ".", identifier ;
dot_subscript_int := ".", integer_literal ;
bracket_subscript := "[", list1(",", select_all | formula_subscript), "]" ;
brace_subscript := "{", list1(",", select_all | formula_subscript), "}" ;
formula_subscript := formula ;
range_subscript := range_expression ;
select_all := ":" ;

6. State Machines
-------------------------------------------------------------------------------

fsm := fsm-specification | fsm-definition ;

a) Operators

pipe-operator := "=>" ;
fsm-output-operator := "->" ;
fsm-sigil := "#" ;
next := pipe-operator | fsm-output-operator ;

b) Specification

fsm-specification := fsm-sigil, identifier, left-paren, kind-annotation*, right-paren, (fsm-output-operator, kind-annotation)?, ":=", (state-definition)*, "." ;
state-definition := "|", identifier, (left-paren, kind-annotation, (",", kind-annotation)*, right-paren)? ;

c) Implementation

fsm-definition := fsm-sigil, identifier, left-paren, right-paren, pipe-operator, pattern, state-arm+ ;
state-arm := pattern, (next, pattern | fsm-block)+;
fsm-block := left-brace, statement+, right-brace;
pattern := identifier, (left-paren, pattern-el, right-paren)? ;
pattern-el := value | array-pattern | filter
filter := filter-operator, value ;
array-pattern := left-backet, (identifier | filter, ("," | space)+)* , right-bracket ;


7. Mechdown
-------------------------------------------------------------------------------

code-span := "`" ;
emphasis := "*" ;
strong-emphasis := "**" ;
block-quote-start := ">";

a) Markdown

ul-title := space*, text, space*, newline, equal+, space*, newline* ;
title := ul-title ;
ul-subtitle := space*, text, space*, newline, dash+, space*, newline* ;
subtitle := ul-subtitle ;
inline-code := grave, text, grave, space* ;
paragraph-text := paragraph-starter, paragraph-rest? ;
paragraph := (inline-code | paragraph-text)+, whitespace*, newline* ;
unordered-list := list-item+, newline?, whitespace* ;
list-item := dash, <space+>, <paragraph>, newline* ;
formatted-text := (!grave, !eof, <paragraph-rest | carriage-return | new-line-char>)* ;
code-block := grave, <grave>, <grave>, <newline>, formatted-text, <grave{3}, newline, whitespace*> ;
ordered-list :=
block-quote :=
thematic-break := "--", "-"* ;

b) Mech Extensions

mech-code := statement | block | fxn-define | fsm ;
mech-code-block := grave{3}, !!"mec", <"mech:">, text?, <newline>, <mech-code>, <grave{3}, newline>, whitespace* ;


8. Program Specification
-------------------------------------------------------------------------------

section-element := fxn-define | mech-code-block | code-block | statement | subtitle | paragraph | unordered-list;
section := (!eof, <section-element>, whitespace?)+ ;
body := whitespace*, section+ ;
program := whitespace?, title?, <body>, whitespace?, space* ;
parse-mech-fragment := statement ;
parse-mech := program | statement ;