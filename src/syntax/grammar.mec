Mech Grammar
===============================================================================

(Revised 3/13/2025)

╭────────┬─────────────────────────────────────────────────────╮
│ Symbol │   Semantics                                         │
├────────┼─────────────────────────────────────────────────────┤
│  "abc" │ input matches string literal "abc" (terminal)       │
│  p*    │ input matches `p` for 0 or more times (repetition)  │
│  p+    │ input mathces `p` for 1 or more times (repetition)  │
│  p?    │ input mathces `p` for 0 or 1 time (optional)        │
│ p1, p2 │ input matches `p1` followed by `p2` (sequence)      │
│ p1 | p2│ input matches `p1` or `p2` (ordered choice)         │
│  !!p   │ input matches `p`; never consume input (peek)       │
│  !p    │ input doesn't match `p`; never consume input (peek) │
│ (...)  │ common grouping                                     │
│ <...>  │ labeled grouping                                    │
╰────────┴─────────────────────────────────────────────────────╯


1. The Basics
-------------------------------------------------------------------------------

a) Characters

alpha = "a".."z" | "A".."Z";
digt = "0".."9";
emoji := emoji-grapheme+ ;
word := alpha+ ;
digit1 := digit+ ;
digit0 := digit* ;
bin-digit := "0" | "1" ;
hex-digit := digit | "a" .. "f" | "A" .. "F" ;
oct-digit := "0" .. "7" ;
number := digit1 ;

punctuation := period | exclamation | question | comma | colon | semicolon | quote | apostrophe ;
symbol := ampersand | bar | at | slash | hashtag | equal | backslash | tilde | plus | dash | asterisk | caret | underscore ;

grouping-symbol := left-parenthesis | right-parenthesis | left-angle | right-angle | left-brace | right-brace | left-bracket | right-bracket ;
paragraph-symbol := ampersand | at | slash | backslash | asterisk | caret | hashtag | underscore | equal | tilde | plus | percent ;
paragraph-starter := (word | number | quote | left-angle | right-angle | left-bracket | right-bracket | period | exclamation | question | comma | colon | semicolon | left-parenthesis | right-parenthesis | emoji)+ ;
paragraph-element := (!define-operator, text)+ ;
paragraph := paragraph-starter, paragraph-element* ;
escaped-char := backslash,  symbol | punctuation ;
text := alpha | digit | space | tab | escaped-char | punctuation | grouping-symbol | symbol ;
space-tab := space | tab ;
list-separator := whitespace*, ",", whitespace* ;
enum-separator := whitespace*, "|", whitespace* ;

emoji-grapheme := ?emoji-grapheme-literal? ;
forbidden-emoji := box-drawing | other-forbidden-shapes ;
emoji := (!forbidden-emoji, emoji-grapheme) ;

b) Whitespace

carriage-return-new-line := "\r\n" ;
new-line := carriage-return-new-line | new-line-char | carriage-return ;
whitespace := space | new-line | tab ;

c) Identifiers

identifier := (alpha | emoji), (alpha | digit | symbol | emoji)* ;

d) Comments

comment-sigil := "--" | "//" ;
comment := comment-singleline | comment-multiline ;
comment-singleline := ws0, comment-sigil, text+ ;
comment-multiline := whitespace*, "/*", (!"*/", whitespace* | text)+, "*/" ;

2. Literals
-------------------------------------------------------------------------------

literal := (number | string | atom | boolean | empty), kind-annotation? ;

a) Boolean

boolean := true-literal | false-literal ;
true-literal := english-true-literal | true-symbol ;
false-literal := english-false-literal | false-symbol ;
true-symbol := "✓" ;
false-symbol := "✗" ;
english-true-literal := "true" ;
english-false-literal := "false" ;

b) Numbers

number := number := real-number, "i"? | ("+", real-number, "i")? ;
integer-literal := digit+;
float-literal := "."?, digit+, "."?, digit* ;
decimal-literal := "0d", <digit+> ;
hexadecimal-literal := "0x", <hex-digit+> ;
octal-literal := "0o", <oct-digit+> ;
binary-literal := "0b", <bin-digit+> ;
scientific-literal :=  (float-literal | integer-literal), ("e" | "E"), plus?, dash?, (float-literal | integer-literal) ;
rational-literal := integer-literal, slash, integer-literal ;

c) Strings

string := quote, (!quote, text)*, quote ;

d) Atoms

atom := "`", identifier ;

e) Empty

empty := underscore+ ;

f) Kinds

kind-annotation := left-angle, kind, right-angle ;
kind := kind-fxn | kind-empty | kind-atom | kind-tuple | kind-scalar | kind-bracket | kind-map | kind-brace ;
kind-empty := underscore+ ;
kind-atom := "`", identifier ;
kind-map := "{", kind, ":", kind, "}" ;
kind-fxn := "(", list0(list-separator, kind), ")", "=", "(", list0(list-separator, kind), ")" ;
kind-brace := "{", list1(",", kind), "}", ":"?, list0("," , literal) ;
kind-bracket := kind-bracket := "[", list1(",",kind), "]", ":"?, list0(",", literal) ;
kind-tuple = "(", list1(",",kind) ")" ;
kind-scalar := identifier ;

3. Structures
-------------------------------------------------------------------------------

structure := empty-set | empty-table | table | matrix | tuple | tuple-struct | record | map | set ;

a) Set

set := "{", whitespace*, list0(("," | whitespace+), expression), whitespace*, "}" ;
empty-set := empty-set := table-start, whitespace*, empty, whitespace*, table-end ;

b) Map

map := "{", whitespace*, mapping*, whitespace*, "}" ;
mapping :=  whitespace*, expression, whitespace*, ":", whitespace*, expression, comma?, whitespace* ;

c) Matrix

matrix-column := (space | tab)*, expression, ((space | tab)*, ("," | table-separator)?, (space | tab)*) ;
matrix-row := table-separator?, (space | tab)*, matrix-column+, semicolon?, new-line?, (box-drawing-char+, new-line)? ;
matrix := matrix-start, (box-drawing-char | whitespace)*, matrix-row*, box-drawing-char*, matrix-end ;

d) Table

table := table-start, (box-drawing-char | whitespace)*, table-header, (box-drawing-char | whitespace)*, table-row+, box-drawing-char*, whitespace*, table-end ;

binding := identifier, kind-annotation?, colon, expression, ","? ;
table-column := table-column := (space | tab)*, expression, ((space | tab)*, ("," | table-separator)?, (space | tab)*) ;
table-row := table-separator?, (space | tab)*, table-column+, semicolon?, new-line?, (box-drawing-char+, new-line)? ;
table-header := list1(space-tab+, field), (space | tab)*, (bar| box-vert), whitespace* ;
field := identifier, kind-annotation? ;

empty-table := table-start, whitespace*, table-end ;

e) Record

record := table-start, whitespace*, binding+, whitespace*, table-end ;

f) Tuple

tuple := "(", list0(",", expression), ")" ;
tuple-struct = atom, "(", expression, ")" ;

b) Pretty Print Tables

table-title := "│", identifier, ["+"], space, "(", number, space, "x", space, number, ")", {space}, "│", new-line;
table-type := "U8"|"U16"|"U32"|"U64"|"U128"|"I8"|"I16"|"I32"|"I64"|"I128"|"F32"|"F64"|"Bool"|"String";
table-topline := "╭",{"-"}, "╮", new-line ;
table-line := "╭" | "├" | "╰",{"-",["┼" | "┬" | "┴"],"-"},"╮" | "┤" | "╯", new-line;
table-botline := "╰", {"-",["┴"],"-"}, "╯", new-line;
table-label := "│" , [{identifier, {space}, "│"}], new-line ;
table-output := table-line, table-title, table-line, table-label?, table-line, ("│", {table-type, {space}, "│"}, newline)?, {"│", {expressions, {space}, "│"}, new-line}, table-line ;

3. Statements
-------------------------------------------------------------------------------

statement := variable-define | variable-assign | enum-define | fsm-declare | kind-define ;

a) Operators

split-operator := ">-" ;
flatten-operator := "-<" ;
define-operator := ":=" ;
assign-operator := "=";
add-assign-operator := "+=";
sub-assign-operator := "-=";
mul-assign-operator := "*=";
div-assign-operator := "/=";
exp-assign-operator := "^=";
op-assign-operator := add-assign-operator | sub-assign-operator | mul-assign-operator | div-assign-operator | exp-assign-operator ;
enum-separator := "|";

b) Statements

variable-assign := slice-ref, !define-operator, assign-operator, expression ;
variable-define := tilde?, var, !assign-operator, define-operator, expression ;

split-data := (identifier | table), <!stmt-operator>, space*, split-operator, <space+>, <expression> ;
flatten-data := identifier, <!stmt-operator>, space*, flatten-operator, <space+>, <expression> ;

enum-define := "<", identifier, ">", define-operator, list1(enum-separator, enum-variant);
enum-variant := grave?, identifier, enum-variant-kind? ;
enum-variant-kind := "(", kind-annotation, ")" ;

kind-define := "<", identifier, ">", define-operator, kind-annotation ;

op-assign := slice-ref, !define-operator, op-assign-operator, expression ;


4. Expressions
-------------------------------------------------------------------------------

expression := range-expression | formula ;

a) Math Operators

add := "+" ;
subtract := "-" ;
multiply := "*" ;
divide := "/" ;
exponent := "^" ;
add-sub-operator := add | subtract ;
mul-div-operator := multiply | divide ;
exponent-operator := exponent ;

b) Matrix Operators

matrix-solve := "\" ;
dot-product := "·" ;
cross-product := "⨯" ;
matrix-multiply := "**" ;
transpose := "'" ;
matrix-operator := matrix-multiply | matrix-solve | dot-product | cross-product ;

c) Comparison Operators

not-equal := "!=" | "¬=" | "≠" ;
equal-to := "==" ;
greater-than := ">" ;
less-than := "<" ;
greater-than-equal := ">=" | "≥" ;
less-than-equal := "<=" | "≤" ;
comparison-operator := not-equal | equal-to | greater-than-equal | greater-than | less-than-equal | less-than ;

d) Logic Operators

or := "|" ;
and := "&" ;
not := "!" | "¬" ;
xor := "xor" | "⊕" | "⊻" ;
logic-operator = and | or | xor;

e) Set Operators

union := "∪" ;
intersection := "∩" ;
difference := "∖" ;
complement := "∁" | "'" ;
subset := "⊆" ;
superset := "⊇" ;
proper-subset := "⊊" ;
proper-superset := "⊋" ;
element-of := "∈" ;
not-element-of := "∉" ;

f) Range Operators

range-inclusive := "..=" ;
range-exclusive := ".." ;
range-operator := range-inclusive | range-exclusive ;

g) Formulas

parenthetical-term := left-parenthesis, formula, right-parenthesis ;
negate-factor := "-", factor ;
not-factor := "not", factor ;

formula := l1, (range-operator, l1)* ;
add-sub-operator := add | subtract ;
l1 := l2, (add-sub-operator, l2)* ;
mul-div-operator := multiply | divide ;
matrix-operator := matrix-multiply | multiply | divide | matrix-solve ;
l2 := l3, (mul-div-operator | matrix-operator, l3)* ;
exponent-operator := exponent ;
l3 := l4, (exponent-operator, l4)* ;
logic-operator := and | or | xor ;
l4 := l5, (logic-operator, l5)* ;
comparison-operator := not-equal | equal-to | greater-than-equal | greater-than | less-than-equal | less-than ;
l5 := factor, (comparison-operator, factor)* ;

factor := (parenthetical-term | structure | fsm-pipe | function-call | literal | slice | var), transpose? ;

5. Functions
-------------------------------------------------------------------------------

function-define := identifier, "(", list0(list-separator function-arg), ")", "=", (function-out-args | function-out-arg), define-operator, list1((whitespace1 | statement-separator), statement), period ;
function-out-args := "(", list1(list-separator, function-arg),")" ;
function-out-arg := function-arg ;
function-arg := identifier, kind-annotation ;
argument-list := "(", list0(",", call-arg-with-biding | call-arg) ;

function-call := identifier, argument-list ;
call-arg-with-binding := identifier, colon, expression ;
call-arg := expression ;
var := identifier, kind-annotation? ;

6. Variable Slicing
-------------------------------------------------------------------------------

slice := identifier, subscript ;
slice-ref := identifier, subscript? ;

subscript := (swizzle-subscript | dot-subscript-int | dot-subscript | bracket-subscript | brace-subscript)+ ; 

swizzle-subscript := ".", identifier, "," , list1(",", identifier) ;
dot-subscript := ".", identifier ;
dot-subscript-int := ".", integer-literal ;
bracket-subscript := bracket-subscript := "[", list1(",", select-all | range-subscript | formula-subscript), "]" ;
brace-subscript := brace-subscript := "{", list1(",", select-all | formula-subscript), "}" ;
formula-subscript := formula ;
range-subscript := range-expression ;
select-all := ":" ;

6. State Machines
-------------------------------------------------------------------------------

fsm := "#", identifier, argument-list?, kind-annotation? ;

a) Operators

output-operator := "=>" ;
transition-operator := "->" ;
async-transition-operator := "~>" ;
guard-operator := "|" | "│" | "├" | "└" ;

b) Specification

fsm-specification := "#", identifier, "(", list0(",", var), ")", output-operator?, kind-annotation?, define-operator, fsm-state-definition+, "." ;
fsm-tuple-struct := grave, identifier, "(", list1(",", fsm-pattern), ")" ;
fsm-state-definition := guard-operator, grave, identifier, fsm-state-definition-variables? ;
fsm-state-definition-variables := "(", list0(list-separator, var), ")" ;
fsm-pipe := fsm-instance, (fsm-state-transition | fsm-async-transition | fsm-output)* ;
fsm-declare := fsm, define-operator, fsm-pipe ;
fsm-instance := "#", identifier, fsm-args? ;
fsm-args := "(", list0(list-separator, (call-arg-with-binding | call-arg)), ")" ;

c) Implementation

fsm-implementation := "#", identifier, "(", list0(",", identifier), ")", transition-operator, fsm-pattern, whitespace*, fsm-arm+, "." ;
fsm-arm := comment*, (fsm-transition | fsm-guard-arm), whitespace* ;
fsm-guard-arm := comment*, fsm-pattern, fsm-guard+ ;
fsm-guard := guard-operator, fsm-pattern, (fsm-statement-transition | fsm-state-transition | fsm-output | fsm-async-transition | fsm-block-transition)+ ;
fsm-transition := comment*, fsm-pattern, (fsm-statement-transition | fsm-state-transition | fsm-output | fsm-async-transition | fsm-block-transition)+ ;
fsm-state-transition := transition-operator, fsm-pattern ;
fsm-async-transition := async-transition-operator, fsm-pattern ;
fsm-statement-transition := transition-operator, statement ;
fsm-block-transition := transition-operator, left-brace, mech-code+, right-brace ;
fsm-output := output-operator, fsm-pattern ;
fsm-pattern := fsm-tuple-struct | wildcard | formula ;
wildcard := "*" ;


7. Mechdown
-------------------------------------------------------------------------------

a) Markdown

title := text+, new-line, equal+, (space|tab)*, whitespace* ;
subtitle := digit-token+, period, space*, text+, new-line, dash+, (space|tab)*, new-line, (space|tab)*, whitespace* ;
number-subtitle := (space|tab)*, "(", integer-literal, ")", (space|tab)+, text+, (space|tab)*, whitespace* ;
alpha-subtitle := (space|tab)*, "(", alpha, ")", (space|tab)+, text+, (space|tab)*, whitespace* ;
paragraph-symbol := ampersand | at | slash | backslash | asterisk | caret | hashtag | underscore | equal | tilde | plus | percent ;
paragraph-starter := (word | number | quote | left-angle | right-angle | left-bracket | right-bracket | period | exclamation | question | comma | colon | semicolon | left-parenthesis | right-parenthesis | emoji)+ ;
paragraph-element := (!define-operator, text)+ ;
paragraph := paragraph-starter, paragraph-element* ;
unordered-list := list-item+, new-line?, whitespace* ;
list-item := dash, <space+>, <paragraph>, new-line* ;

b) Mech Extensions

code-block := grave, <grave>, <grave>, <new-line>, any, <grave{3}, new-line, whitespace*> ;
mech-code := mech-code-alt, ("\n" | ";" | comment) ;

8. Program Specification
-------------------------------------------------------------------------------

section-element := mech-code | unordered-list | comment | paragraph | code-block | sub-section;
sub-section-element := comment | unordered-list | mech-code | paragraph | code-block;
section := ul-subtitle?, section-element+ ;
sub-section := alpha-subtitle, sub-section-element* ;
body := section+ ;
program := title?, body ;
parse-mech := program | statement ;