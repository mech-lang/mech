[package]
name = "mech-interpreter"
version = "0.2.57"
authors = ["Corey Montella <corey@mech-lang.org>"]
description = "The Mech language runtime."
documentation = "http://docs.mech-lang.org"
homepage = "https://mech-lang.org"
repository = "https://github.com/mech-lang/mech"
keywords = ["mech", "language", "programming", "dataflow", "runtime"]
categories = ["no-std", "science::robotics", "science", "game-engines", "database-implementations"]
license = "Apache-2.0"
readme = "README.md"
edition = "2021"
rust-version = "1.88"

[badges]
gitlab = { repository = "mech-lang/mech", branch = "main" }
maintenance = { status = "actively-developed" }

[[bin]]
name = "interpreter"
path = "bin/interpreter.rs"

[features]
no_std = ["mech-core/no_std"]

default = ["stdlib", "pretty_print", "serde", "compiler",
            "math_default",
            "statements_default", "subscript_default",
            "mech-core/default",
          ]
statements_default = ["variable_assign","variable_define","kind_define"]
subscript_default = ["subscript_slice", "subscript_range", "logical_indexing", "swizzle", "subscript_formula", "dot_indexing"]

stdlib = ["bool", "string", 
          "u8", "u16", "u32", "u64", "u128", 
          "i8", "i16", "i32", "i64", "i128", 
          "f32", "f64", "c64", "r64", 
          "set", "map", "table", "tuple", "record", "atom",
          "matrix1", "matrix2", "matrix3", "matrix4", "matrix2x3", "matrix3x2",
          "row_vector2", "row_vector3", "row_vector4",
          "vector2", "vector3", "vector4",
          "row_vectord", "vectord", "matrixd",
          "subscript_range", "logical_indexing", "swizzle",
          "subscript_formula", "dot_indexing",
          "variable_define", "variable_assign", "kind_define",
          "kind_annotation", "variables",
          "functions", "formulas",
          "access", "assign", "convert",
        ]

compiler = ["mech-core/compiler"]
pretty_print = ["mech-core/pretty_print"]
serde = ["mech-core/serde"]

statements = ["mech-core/statements"]
variables = ["variable_define", "symbol_table", "mech-core/variables"]
variable_define = ["statements", "functions", "mech-core/variable_define"]
variable_assign = ["statements", "mech-core/variable_assign"]
kind_define = ["kind_annotation", "statements", "mech-core/kind_define"]
kind_annotation = ["functions", "mech-core/kind_annotation"]
formulas = ["mech-core/formulas"]
functions = ["symbol_table", "mech-core/functions"]
symbol_table = ["mech-core/symbol_table"]

access = ["functions"]
assign = ["functions"]
convert = ["functions"]

bool = ["mech-core/bool"]
string = ["mech-core/string"]

# Numbers
numbers = ["mech-core/numbers"]
complex = ["f64", "numbers", "mech-core/complex"]
rational = ["i64", "numbers", "mech-core/rational"]
signed_ints = ["numbers", "mech-core/signed_ints"]
unsigned_ints = ["numbers", "mech-core/unsigned_ints"]
floats = ["numbers", "mech-core/floats"]
u8 = ["unsigned_ints", "mech-core/u8"]
u16 = ["unsigned_ints", "mech-core/u16"]
u32 = ["unsigned_ints", "mech-core/u32"]
u64 = ["unsigned_ints", "mech-core/u64"]
u128 = ["unsigned_ints", "mech-core/u128"]
i8 = ["signed_ints", "mech-core/i8"]
i16 = ["signed_ints", "mech-core/i16"]
i32 = ["signed_ints", "mech-core/i32"]
i64 = ["signed_ints", "mech-core/i64"]
i128 = ["signed_ints", "mech-core/i128"]
f32 = ["floats", "mech-core/f32"]
f64 = ["floats", "mech-core/f64"]
c64 = ["complex", "mech-core/c64"]
r64 = ["rational", "mech-core/r64"]

# Structs
set = ["indexmap", "mech-core/set"]
map = ["indexmap", "mech-core/map"]
table = ["indexmap", "vectord", "record", "mech-core/table"]
tuple = ["mech-core/tuple"]
enum = ["mech-core/enum"]
record = ["indexmap", "tuple", "mech-core/record"]
atom = ["mech-core/atom"]

# Matrix
matrix = ["nalgebra", "mech-core/matrix", "matrix_horzcat", "matrix_vertcat"]
fixed_row_vector = ["row_vector4", "row_vector3", "row_vector2", "mech-core/fixed_row_vector"]
fixed_vector = ["vector4", "vector3", "vector2", "mech-core/fixed_vector"]
fixed_matrix = ["matrix4", "matrix3", "matrix2", "matrix1", "matrix2x3", "matrix3x2", "mech-core/fixed_matrix"]
dynamic_matrix = ["matrixd", "vectord", "row_vectord", "mech-core/dynamic_matrix"]
row_vector4 = ["dynamic_matrix","matrix", "mech-core/row_vector4"]
row_vector3 = ["dynamic_matrix","matrix", "mech-core/row_vector3"]
row_vector2 = ["dynamic_matrix","matrix", "mech-core/row_vector2"]
vector4 = ["dynamic_matrix","matrix", "mech-core/vector4"]
vector3 = ["dynamic_matrix","matrix", "mech-core/vector3"]
vector2 = ["dynamic_matrix","matrix", "mech-core/vector2"]
matrix4 = ["dynamic_matrix","matrix", "mech-core/matrix4"]
matrix3 = ["dynamic_matrix","matrix", "mech-core/matrix3"]
matrix2 = ["dynamic_matrix","matrix", "mech-core/matrix2"]
matrix1 = ["dynamic_matrix","matrix", "mech-core/matrix1"]
matrix2x3 = ["dynamic_matrix","matrix", "mech-core/matrix2x3"]
matrix3x2 = ["dynamic_matrix","matrix", "mech-core/matrix3x2"]
row_vectord =["matrix", "dynamic_matrix", "mech-core/row_vectord"]
vectord = ["matrix", "dynamic_matrix", "mech-core/vectord"]
matrixd = ["matrix", "dynamic_matrix", "mech-core/matrixd"]

# Subscripts
subscript = ["mech-core/subscript"]
subscript_slice = ["subscript", "vectord", "mech-core/subscript_slice"]
subscript_range = ["range", "subscript_slice","vectord", "mech-core/subscript_range"]
subscript_formula = ["subscript_slice","formulas", "mech-core/subscript_formula"]
logical_indexing = ["subscript","vectord","bool", "mech-core/logical_indexing"]
dot_indexing = ["subscript", "mech-core/dot_indexing"]
swizzle = ["subscript", "mech-core/swizzle"]

# Libs
# -----------------------------------------------------------------------------

# Combinatorics
combinatorics_default = ["combinatorics_n_choose_k", "mech-combinatorics/combinatorics_default"]
combinatorics = ["num-traits", "functions", "mech-combinatorics/combinatorics"]
combinatorics_n_choose_k = ["combinatorics", "mech-combinatorics/n_choose_k"]

# Range
range = []

# Math
math_default = ["math_ops_default", "math_ops_assign_default", "math_trig_default", "mech-core/default"]
math = ["mech-math/math", "formulas", "functions"]
math_ops_default = ["math_add", "math_sub", "math_mul", "math_div", "math_exp", "math_mod"]
math_ops_assign_default = ["math_add_assign", "math_sub_assign", "math_mul_assign", "math_div_assign"]
math_trig_default = ["math_acos", "math_acosh", "math_acot", "math_acsc", "math_asec", "math_asin", "math_asinh", "math_atan", "math_atan2", "math_atanh", "math_cos", "math_cosh", "math_cot", "math_csc", "math_sec", "math_sin", "math_sinh", "math_tan", "math_tanh"]
math_trig = ["math", "mech-math/trig"]
math_ops = ["math", "mech-math/ops"]
math_op_assign = ["math", "mech-math/op_assign"]
math_add_assign = ["math_op_assign", "mech-math/add_assign"]
math_sub_assign = ["math_op_assign", "mech-math/sub_assign"]
math_mul_assign = ["math_op_assign", "mech-math/mul_assign"]
math_div_assign = ["math_op_assign", "mech-math/div_assign"]
math_acos = ["math_trig", "mech-math/acos"]
math_acosh = ["math_trig", "mech-math/acosh"]
math_acot = ["math_trig", "mech-math/acot"]
math_acsc = ["math_trig", "mech-math/acsc"]
math_asec = ["math_trig", "mech-math/asec"]
math_asin = ["math_trig", "mech-math/asin"]
math_asinh = ["math_trig", "mech-math/asinh"]
math_atan = ["math_trig", "mech-math/atan"]
math_atan2 = ["math_trig", "mech-math/atan2"]
math_atanh = ["math_trig", "mech-math/atanh"]
math_cos = ["math_trig", "mech-math/cos"]
math_cosh = ["math_trig", "mech-math/cosh"]
math_cot = ["math_trig", "mech-math/cot"]
math_csc = ["math_trig", "mech-math/csc"]
math_sec = ["math_trig", "mech-math/sec"]
math_sin = ["math_trig", "mech-math/sin"]
math_sinh = ["math_trig", "mech-math/sinh"]
math_tan = ["math_trig", "mech-math/tan"]
math_tanh = ["math_trig", "mech-math/tanh"]
math_add = ["math_ops", "mech-math/add"]
math_sub = ["math_ops", "mech-math/sub"]
math_mul = ["math_ops", "mech-math/mul"]
math_div = ["math_ops", "mech-math/div"]
math_exp = ["math_ops", "mech-math/exp"]
math_mod = ["math_ops", "mech-math/mod"]
math_neg = ["math_ops", "mech-math/neg"]

# Horzcat and Vertcat

matrix_horzcat = ["matrix"]
matrix_vertcat = ["matrix"]

[dependencies]
mech-core = { version = "0.2.57", default-features = false }
mech-math = { version = "0.2.57", default-features = false, optional = true}
#mech-logic = { version = "0.2.57", default-features = false, optional = true }
#mech-range = { version = "0.2.57", default-features = false, optional = true }
#mech-matrix = { version = "0.2.57", default-features = false, optional = true }
#mech-compare = { version = "0.2.57", default-features = false, optional = true }
#mech-stats = { version = "0.2.57", default-features = false, optional = true }
#mech-io = { version = "0.2.57", default-features = false, optional = true }
mech-combinatorics = { version = "0.2.57", default-features = false, optional = true }

paste = "1.0.15"
byteorder = "1.5.0"
nalgebra = {version = "0.34.0", optional = true}
indexmap = {version = "2.10.0", optional = true}
bincode = {version = "2.0.1", optional = true}

[dependencies.num-traits]
version = "0.2.19"
default-features = false
features = ["libm"]
optional = true