[package]
name = "mech-interpreter"
version = "0.2.57"
authors = ["Corey Montella <corey@mech-lang.org>"]
description = "The Mech language runtime."
documentation = "http://docs.mech-lang.org"
homepage = "https://mech-lang.org"
repository = "https://github.com/mech-lang/mech"
keywords = ["mech", "language", "programming", "dataflow", "runtime"]
categories = ["no-std", "science::robotics", "science", "game-engines", "database-implementations"]
license = "Apache-2.0"
readme = "README.md"
edition = "2021"
rust-version = "1.88"

[badges]
gitlab = { repository = "mech-lang/mech", branch = "main" }
maintenance = { status = "actively-developed" }

[[bin]]
name = "interpreter"
path = "bin/interpreter.rs"

[features]
default = ["stdlib", "pretty_print", "serde",
           "math", "logic", "range", "matrix", "compare", "stats", "io", "combinatorics"]

serde = ["mech-core/serde", "bincode", "bincode/serde"]
pretty_print = ["mech-core/pretty_print"]

math = ["math_trig", "math_ops"]
math_trig = [
    "math_sin", "math_cos", "math_tan", "math_asin", "math_acos", "math_atan", "math_sinh", "math_cosh", "math_tanh",
    "math_asinh", "math_acosh", "math_atanh", "math_sec", "math_csc", "math_cot", "math_acsc", "math_asec", "math_acot",
    "math_atan2", "mech-math/trig"
]
math_sin = ["mech-math/sin"]
math_cos = ["mech-math/cos"]
math_tan = ["mech-math/tan"]
math_asin = ["mech-math/asin"]
math_acos = ["mech-math/acos"]
math_atan = ["mech-math/atan"]
math_sinh = ["mech-math/sinh"]
math_cosh = ["mech-math/cosh"]
math_tanh = ["mech-math/tanh"]
math_asinh = ["mech-math/asinh"]
math_acosh = ["mech-math/acosh"]
math_atanh = ["mech-math/atanh"]
math_sec = ["mech-math/sec"]
math_csc = ["mech-math/csc"]
math_cot = ["mech-math/cot"]
math_acsc = ["mech-math/acsc"]
math_asec = ["mech-math/asec"]
math_acot = ["mech-math/acot"]
math_atan2 = ["mech-math/atan2"]

math_add = ["mech-math/add"]
math_sub = ["mech-math/sub"]
math_mul = ["mech-math/mul"]
math_div = ["mech-math/div"]
math_exp = ["mech-math/exp", "mech-core/math_exp"]
math_mod = ["mech-math/mod"]
math_neg = ["mech-math/neg"]
math_ops = [
    "math_add", "math_sub", "math_mul", "math_div", "math_exp", "math_mod", "math_neg", "mech-math/ops",
    "num-traits"
]

logic = ["logic_and", "logic_or", "logic_not", "logic_xor"]
logic_and = ["mech-logic/and"]
logic_or = ["mech-logic/or"]
logic_not = ["mech-logic/not"]
logic_xor = ["mech-logic/xor"]

range = ["range_inclusive", "range_exclusive"]
range_inclusive = ["mech-range/inclusive"]
range_exclusive = ["mech-range/exclusive"]

compare = ["compare_eq", "compare_neq", "compare_lte", "compare_lt", "compare_gte", "compare_gt"]
compare_eq = ["mech-compare/eq"]
compare_neq = ["mech-compare/neq"]
compare_lte = ["mech-compare/lte"]
compare_lt = ["mech-compare/lt"]
compare_gt = ["mech-compare/gt"]
compare_gte = ["mech-compare/gte"]

stats = ["stats_sum"]
stats_sum = ["mech-stats/sum"]

io = ["io_print", "io_println"]
io_print = ["mech-io/print"]
io_println = ["mech-io/println"]

combinatorics = ["combinatorics_n_choose_k"]
combinatorics_n_choose_k = ["mech-combinatorics/n_choose_k"]

stdlib = [
    "bool", "functions", "string", "numbers", "matrix", "set", "map", "table", "tuple", "record", "atom",
    "mech-core/stdlib", "mech-math/stdlib", "mech-logic/stdlib", "mech-range/stdlib", "mech-matrix/stdlib",
    "mech-compare/stdlib", "mech-stats/stdlib", "mech-io/stdlib", "mech-combinatorics/stdlib"
]
functions = ["mech-core/functions"]
numbers = [
    "signed_ints", "unsigned_ints", "floats", "complex", "rational",
    "mech-core/numbers", "mech-math/numbers", "mech-logic/numbers", "mech-range/numbers", "mech-matrix/numbers",
    "mech-compare/numbers", "mech-stats/numbers", "mech-io/numbers", "mech-combinatorics/numbers"
]
complex = ["c64", "mech-core/complex", "mech-math/complex", "mech-logic/complex", "mech-range/complex", "mech-matrix/complex", "mech-compare/complex", "mech-stats/complex", "mech-io/complex", "mech-combinatorics/complex"]
rational = ["r64", "mech-core/rational", "mech-math/rational", "mech-logic/rational", "mech-range/rational", "mech-matrix/rational", "mech-compare/rational", "mech-stats/rational", "mech-io/rational", "mech-combinatorics/rational"]
signed_ints = ["i8", "i16", "i32", "i64", "i128", "mech-core/signed_ints", "mech-math/signed_ints", "mech-logic/signed_ints", "mech-range/signed_ints", "mech-matrix/signed_ints", "mech-compare/signed_ints", "mech-stats/signed_ints", "mech-io/signed_ints", "mech-combinatorics/signed_ints"]
unsigned_ints = ["u8", "u16", "u32", "u64", "u128", "mech-core/unsigned_ints", "mech-math/unsigned_ints", "mech-logic/unsigned_ints", "mech-range/unsigned_ints", "mech-matrix/unsigned_ints", "mech-compare/unsigned_ints", "mech-stats/unsigned_ints", "mech-io/unsigned_ints", "mech-combinatorics/unsigned_ints"]
floats = ["f32", "f64", "mech-core/floats", "mech-math/floats", "mech-logic/floats", "mech-range/floats", "mech-matrix/floats", "mech-compare/floats", "mech-stats/floats", "mech-io/floats", "mech-combinatorics/floats"]
bool = ["mech-core/bool", "mech-math/bool", "mech-logic/bool", "mech-range/bool", "mech-matrix/bool", "mech-compare/bool", "mech-stats/bool", "mech-io/bool", "mech-combinatorics/bool"]
string = ["mech-core/string", "mech-math/string", "mech-logic/string", "mech-range/string", "mech-matrix/string", "mech-compare/string", "mech-stats/string", "mech-io/string", "mech-combinatorics/string"]
u8 = ["mech-core/u8", "mech-math/u8", "mech-logic/u8", "mech-range/u8", "mech-matrix/u8", "mech-compare/u8", "mech-stats/u8", "mech-io/u8", "mech-combinatorics/u8"]
u16 = ["mech-core/u16", "mech-math/u16", "mech-logic/u16", "mech-range/u16", "mech-matrix/u16", "mech-compare/u16", "mech-stats/u16", "mech-io/u16", "mech-combinatorics/u16"]
u32 = ["mech-core/u32", "mech-math/u32", "mech-logic/u32", "mech-range/u32", "mech-matrix/u32", "mech-compare/u32", "mech-stats/u32", "mech-io/u32", "mech-combinatorics/u32"]
u64 = ["mech-core/u64", "mech-math/u64", "mech-logic/u64", "mech-range/u64", "mech-matrix/u64", "mech-compare/u64", "mech-stats/u64", "mech-io/u64", "mech-combinatorics/u64"]
u128 = ["mech-core/u128", "mech-math/u128", "mech-logic/u128", "mech-range/u128", "mech-matrix/u128", "mech-compare/u128", "mech-stats/u128", "mech-io/u128", "mech-combinatorics/u128"]
i8 = ["mech-core/i8", "mech-math/i8", "mech-logic/i8", "mech-range/i8", "mech-matrix/i8", "mech-compare/i8", "mech-stats/i8", "mech-io/i8", "mech-combinatorics/i8"]
i16 = ["mech-core/i16", "mech-math/i16", "mech-logic/i16", "mech-range/i16", "mech-matrix/i16", "mech-compare/i16", "mech-stats/i16", "mech-io/i16", "mech-combinatorics/i16"]
i32 = ["mech-core/i32", "mech-math/i32", "mech-logic/i32", "mech-range/i32", "mech-matrix/i32", "mech-compare/i32", "mech-stats/i32", "mech-io/i32", "mech-combinatorics/i32"]
i64 = ["mech-core/i64", "mech-math/i64", "mech-logic/i64", "mech-range/i64", "mech-matrix/i64", "mech-compare/i64", "mech-stats/i64", "mech-io/i64", "mech-combinatorics/i64"]
i128 = ["mech-core/i128", "mech-math/i128", "mech-logic/i128", "mech-range/i128", "mech-matrix/i128", "mech-compare/i128", "mech-stats/i128", "mech-io/i128", "mech-combinatorics/i128"]
f32 = ["mech-core/f32", "mech-math/f32", "mech-logic/f32", "mech-range/f32", "mech-matrix/f32", "mech-compare/f32", "mech-stats/f32", "mech-io/f32", "mech-combinatorics/f32"]
f64 = ["mech-core/f64", "mech-math/f64", "mech-logic/f64", "mech-range/f64", "mech-matrix/f64", "mech-compare/f64", "mech-stats/f64", "mech-io/f64", "mech-combinatorics/f64"]
c64 = ["mech-core/c64", "mech-math/c64", "mech-logic/c64", "mech-range/c64", "mech-matrix/c64", "mech-compare/c64", "mech-stats/c64", "mech-io/c64", "mech-combinatorics/c64"]
r64 = ["mech-core/r64", "mech-math/r64", "mech-logic/r64", "mech-range/r64", "mech-matrix/r64", "mech-compare/r64", "mech-stats/r64", "mech-io/r64", "mech-combinatorics/r64"]
set = ["indexmap", "mech-core/set", "mech-math/set", "mech-logic/set", "mech-range/set", "mech-matrix/set", "mech-compare/set", "mech-stats/set", "mech-io/set", "mech-combinatorics/set"]
map = ["indexmap", "mech-core/map", "mech-math/map", "mech-logic/map", "mech-range/map", "mech-matrix/map", "mech-compare/map", "mech-stats/map", "mech-io/map", "mech-combinatorics/map"]
table = ["indexmap", "mech-core/table", "mech-math/table", "mech-logic/table", "mech-range/table", "mech-matrix/table", "mech-compare/table", "mech-stats/table", "mech-io/table", "mech-combinatorics/table"]
tuple = ["mech-core/tuple", "mech-math/tuple", "mech-logic/tuple", "mech-range/tuple", "mech-matrix/tuple", "mech-compare/tuple", "mech-stats/tuple", "mech-io/tuple", "mech-combinatorics/tuple"]
record = ["indexmap", "mech-core/record", "mech-math/record", "mech-logic/record", "mech-range/record", "mech-matrix/record", "mech-compare/record", "mech-stats/record", "mech-io/record", "mech-combinatorics/record"]
atom = ["mech-core/atom", "mech-math/atom", "mech-logic/atom", "mech-range/atom", "mech-matrix/atom", "mech-compare/atom", "mech-stats/atom", "mech-io/atom", "mech-combinatorics/atom"]

matrix = [
    "fixed_matrix", "fixed_vector", "fixed_row_vector", "row_vectord", "vectord", "matrixd",
    "matrix_transpose", "matrix_matmul", 
    "mech-core/matrix", "mech-math/matrix", "mech-logic/matrix", "mech-range/matrix", "mech-matrix/matrix", "mech-compare/matrix", "mech-stats/matrix", "mech-io/matrix", "mech-combinatorics/matrix",
    "nalgebra"]
fixed_row_vector = ["row_vector4", "row_vector3", "row_vector2", "mech-core/fixed_row_vector", "mech-math/fixed_row_vector", "mech-logic/fixed_row_vector", "mech-range/fixed_row_vector", "mech-matrix/fixed_row_vector", "mech-compare/fixed_row_vector", "mech-stats/fixed_row_vector", "mech-io/fixed_row_vector", "mech-combinatorics/fixed_row_vector"]
fixed_vector = ["vector4", "vector3", "vector2", "mech-core/fixed_vector", "mech-math/fixed_vector", "mech-logic/fixed_vector", "mech-range/fixed_vector", "mech-matrix/fixed_vector", "mech-compare/fixed_vector", "mech-stats/fixed_vector", "mech-io/fixed_vector", "mech-combinatorics/fixed_vector"]
fixed_matrix = ["matrix4", "matrix3", "matrix2", "matrix1", "matrix2x3", "matrix3x2", "mech-core/fixed_matrix", "mech-math/fixed_matrix", "mech-logic/fixed_matrix", "mech-range/fixed_matrix", "mech-matrix/fixed_matrix", "mech-compare/fixed_matrix", "mech-stats/fixed_matrix", "mech-io/fixed_matrix", "mech-combinatorics/fixed_matrix"]
matrix_transpose = ["mech-matrix/transpose"]
matrix_matmul = ["mech-matrix/matmul"]

row_vector4 = ["mech-core/row_vector4", "mech-math/row_vector4", "mech-logic/row_vector4", "mech-range/row_vector4", "mech-matrix/row_vector4", "mech-compare/row_vector4", "mech-stats/row_vector4", "mech-io/row_vector4", "mech-combinatorics/row_vector4"]
row_vector3 = ["mech-core/row_vector3", "mech-math/row_vector3", "mech-logic/row_vector3", "mech-range/row_vector3", "mech-matrix/row_vector3", "mech-compare/row_vector3", "mech-stats/row_vector3", "mech-io/row_vector3", "mech-combinatorics/row_vector3"]
row_vector2 = ["mech-core/row_vector2", "mech-math/row_vector2", "mech-logic/row_vector2", "mech-range/row_vector2", "mech-matrix/row_vector2", "mech-compare/row_vector2", "mech-stats/row_vector2", "mech-io/row_vector2", "mech-combinatorics/row_vector2"]
vector4 = ["mech-core/vector4", "mech-math/vector4", "mech-logic/vector4", "mech-range/vector4", "mech-matrix/vector4", "mech-compare/vector4", "mech-stats/vector4", "mech-io/vector4", "mech-combinatorics/vector4"]
vector3 = ["mech-core/vector3", "mech-math/vector3", "mech-logic/vector3", "mech-range/vector3", "mech-matrix/vector3", "mech-compare/vector3", "mech-stats/vector3", "mech-io/vector3", "mech-combinatorics/vector3"]
vector2 = ["mech-core/vector2", "mech-math/vector2", "mech-logic/vector2", "mech-range/vector2", "mech-matrix/vector2", "mech-compare/vector2", "mech-stats/vector2", "mech-io/vector2", "mech-combinatorics/vector2"]
matrix4 = ["mech-core/matrix4", "mech-math/matrix4", "mech-logic/matrix4", "mech-range/matrix4", "mech-matrix/matrix4", "mech-compare/matrix4", "mech-stats/matrix4", "mech-io/matrix4", "mech-combinatorics/matrix4"]
matrix3 = ["mech-core/matrix3", "mech-math/matrix3", "mech-logic/matrix3", "mech-range/matrix3", "mech-matrix/matrix3", "mech-compare/matrix3", "mech-stats/matrix3", "mech-io/matrix3", "mech-combinatorics/matrix3"]
matrix2 = ["mech-core/matrix2", "mech-math/matrix2", "mech-logic/matrix2", "mech-range/matrix2", "mech-matrix/matrix2", "mech-compare/matrix2", "mech-stats/matrix2", "mech-io/matrix2", "mech-combinatorics/matrix2"]
matrix1 = ["mech-core/matrix1", "mech-math/matrix1", "mech-logic/matrix1", "mech-range/matrix1", "mech-matrix/matrix1", "mech-compare/matrix1", "mech-stats/matrix1", "mech-io/matrix1", "mech-combinatorics/matrix1"]
matrix2x3 = ["mech-core/matrix2x3", "mech-math/matrix2x3", "mech-logic/matrix2x3", "mech-range/matrix2x3", "mech-matrix/matrix2x3", "mech-compare/matrix2x3", "mech-stats/matrix2x3", "mech-io/matrix2x3", "mech-combinatorics/matrix2x3"]
matrix3x2 = ["mech-core/matrix3x2", "mech-math/matrix3x2", "mech-logic/matrix3x2", "mech-range/matrix3x2", "mech-matrix/matrix3x2", "mech-compare/matrix3x2", "mech-stats/matrix3x2", "mech-io/matrix3x2", "mech-combinatorics/matrix3x2"]
row_vectord = ["mech-core/row_vectord", "mech-math/row_vectord", "mech-logic/row_vectord", "mech-range/row_vectord", "mech-matrix/row_vectord", "mech-compare/row_vectord", "mech-stats/row_vectord", "mech-io/row_vectord", "mech-combinatorics/row_vectord"]
vectord = ["mech-core/vectord", "mech-math/vectord", "mech-logic/vectord", "mech-range/vectord", "mech-matrix/vectord", "mech-compare/vectord", "mech-stats/vectord", "mech-io/vectord", "mech-combinatorics/vectord"]
matrixd = ["mech-core/matrixd", "mech-math/matrixd", "mech-logic/matrixd", "mech-range/matrixd", "mech-matrix/matrixd", "mech-compare/matrixd", "mech-stats/matrixd", "mech-io/matrixd", "mech-combinatorics/matrixd"]

[dependencies]
mech-core = { version = "0.2.57", default-features = false }
mech-math = { version = "0.2.57", default-features = false, optional = true}
mech-logic = { version = "0.2.57", default-features = false, optional = true }
mech-range = { version = "0.2.57", default-features = false, optional = true }
mech-matrix = { version = "0.2.57", default-features = false, optional = true }
mech-compare = { version = "0.2.57", default-features = false, optional = true }
mech-stats = { version = "0.2.57", default-features = false, optional = true }
mech-io = { version = "0.2.57", default-features = false, optional = true }
mech-combinatorics = { version = "0.2.57", default-features = false, optional = true }

nalgebra = {version="0.34.0", optional = true}
indexmap = {version = "2.10.0", optional = true}
paste = "1.0.15"
bincode = {version="2.0.1", optional = true}

[dependencies.num-traits]
version = "0.2.19"
default-features = false
features = ["libm"]
optional = true