Table
===============================================================================

A table in Mech is a set of records, where each record corresponds to a row and each column has a name and kind. Tables provide structured, columnar data that is flexible and human-readable.

1. Syntax
-------------------------------------------------------------------------------

(1.1) Basic Syntax

Tables are defined using the pipe `|` character. Each column is defined with a name and a kind, which describes the type of data it holds.

```
| x&ltf32&gt  y&ltbool&gt | 
|  1.2     true   |
|  1.3     false  |
```

This creates a table with two columns, `x` of kind `f32` and `y` of kind `bool`:

```mech:disabled
| x<f32>  y<bool> | 
|  1.2     true   |
|  1.3     false  |
```

(1.2) Inline Syntax

You can write tables inline as well:

```
| x&ltf32&gt  y&ltbool&gt | 1.2 true | 1.3 false |
```

(1.3) Fancy Syntax

The Mech REPL formats matrix output using fancy box drawing characters for better readability.

```
╭────────┬─────────╮
│ x&ltf32&gt │ y&ltbool&gt │
├────────┼─────────┤
│  1.2   │  true   │
│  1.3   │  false  │
╰────────┴─────────╯
```

Mech can parse data formatted this way, allowing you to copy or pipe REPL output directly into a Mech program that expects a table. The above example evaluates to:

```mech:disabled
╭────────┬─────────╮
│ x<u64> │ y<bool> │
├────────┼─────────┤
│  1.2   │  true   │
│  1.3   │  false  │
╰────────┴─────────╯
```

Fancy tables can be formatted in a variety of ways:

```
╭────────┬────────╮
│ x&ltu64&gt │ y&ltf32&gt │
├────────┼────────┤
│   1    │   2    │
├────────┼────────┤
│   3    │   4    │
╰────────┴────────╯
```

This one has no horizontal lines between rows, making it more compact:

```
╭────────┬────────╮
│ x&ltu64&gt │ y&ltf32&gt │
│   1    │   2    │
│   3    │   4    │
╰────────┴────────╯
```

2. Kind
--------------------------------------------------------------------------------

A table's kind describes the names and kinds of the columns, as well as the number of rows in the table. For example:

```
<|x&ltu8&gt y&ltf32&gt|:3>
```

This represents a table with two columns, `x` of kind `u8` and `y` of kind `f32`, and 3 rows.

3. Construction
-------------------------------------------------------------------------------

Tables can be constructed of vectors, matrices, or records.

(3.1) From vectors

(3.2) From a matrix

(3.3) From records

4. Heterogeneous Columns
-------------------------------------------------------------------------------

The kind `_` indicates that a column may contain heterogeneous data:

```mech:disabled
| x<*>   y<*> |
|  1.2    true| 
|  "Hi"   8   |
```

Each cell in the column may hold a different type of value.

(3.1) Partial Columns

You can omit values in the table using using `_` to indicate a missing value:

```mech:disabled
| x<u8>  y<string> z<[u8]:1,3> |
|   _      "a"       [1 2 3] |
|   4      "b"          _    |
|   7       _        [7 8 9] |
```

5. Access
-------------------------------------------------------------------------------