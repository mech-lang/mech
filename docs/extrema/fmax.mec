math/fmax
===============================================================================

%% Floating-point maximum of two values

1. Usage
-------------------------------------------------------------------------------
```mech:disabled
Y := math/fmax(X, Z)
```
2. Description
-------------------------------------------------------------------------------
Computes the element-wise maximum of two floating-point values. This
function uses IEEE 754 floating-point comparison rules and supports
both single-precision (f32) and double-precision (f64).

- For scalars, it returns the larger of the two inputs.
- For vectors and matrices, the maximum is computed element-wise.

The function is implemented using the `fmax` (f64) and `fmaxf` (f32)
functions from the `libm` library, with Mech-specific wrappers and
macros to handle scalars, vectors, and matrices.

3. Input
-------------------------------------------------------------------------------
| Argument | Kind           | Description |
|----------|----------------|--------------------------------------------------|
| X        | float, [float] | First floating-point value(s). |
| Z        | float, [float] | Second floating-point value(s). |

4. Output
-------------------------------------------------------------------------------
| Argument | Kind         | Description |
|----------|--------------|---------------------------------------------------|
| Y        | matches input| The element-wise maximum of X and Z. |

5. Examples
-------------------------------------------------------------------------------
(a) Compute maximum of two scalars
```mech:ex1
y := math/fmax(3.5, 4.2)
```
(b) Compute element-wise maximum of two vectors
```mech:ex2
x := [1.0, 5.0, 3.0]
z := [2.0, 4.0, 6.0]
y := math/fmax(x, z)
```
(c) Compute element-wise maximum of two matrices
```mech:ex3
x := [1.0, 5.0; 7.0, 2.0]
z := [3.0, 4.0; 6.0, 8.0]
y := math/fmax(x, z)
```
6. Details
-------------------------------------------------------------------------------
The function supports a wide range of structured numeric types,
including:

- Scalars (F32, F64)
- Fixed-size matrices (Matrix1, Matrix2, Matrix3, Matrix4, etc.)
- Rectangular matrices (Matrix2x3, Matrix3x2, etc.)
- Vectors (Vector2, Vector3, Vector4, DVector)
- Row vectors (RowVector2, RowVector3, RowVector4, RowDVector)
- Dynamic matrices (DMatrix)

Specialized implementations are generated using macros (`fmax_op`,
`fmaxf_op`, `fmax_vec_op`, `fmaxf_vec_op`). Each variant integrates
with the Mech runtime by implementing the `MechFunctionImpl` trait.

Edge cases:
- If either argument is NaN, the result follows IEEE 754 rules: the
  non-NaN value is returned if possible, otherwise NaN.
- Works for both f32 and f64, with separate implementations.

This makes math/fmax suitable for robust numerical and scientific
computations requiring maximum values across scalars, vectors, and
matrices.
