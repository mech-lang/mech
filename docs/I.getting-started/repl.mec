Using the Mech REPL
===============================================================================

The Mech Read-Eval-Print Loop (REPL) provides an interactive environment for executing Mech commands, inspecting symbols, and debugging programs. Below are the available REPL commands.

1. Starting the REPL
-------------------------------------------------------------------------------

To start the REPL, run:

```sh
mech
```

You can load a script into the REPL by running with the `--repl` option:

```sh
mech --repl my_script.mec
```

Once inside, you can enter commands prefixed with `:`, otherwise the REPL will interpret the input as a Mech expression and evaluate it, and print the result and the associated type.

2. Commands
-------------------------------------------------------------------------------

(a) `:help` (`:h`)

Displays this help message with a list of available commands.

```sh
:help
```

(b) `:quit` (`:q`)

Exits the REPL.

```sh
:quit
```

(c) `:symbols` (`:s`)

Searches for symbols in the current session. You can provide an optional search pattern to filter results.

```sh
:s
:s velocity
```

(d) `:plan` (`:p`)

Displays the execution plan.

```sh
:plan
```

(e) `:whos` (`:w`)

Searches the symbol directory. Optionally, provide a search pattern to filter results.

```sh
:whos
:whos position
```

(f) `:clc` (`:c`)

Clears the screen, resets the cursor position. 

```sh
:clc
```

(g) `:clear`

Clears the interpreter state. If a target variable is provided, only that variable is cleared.

```sh
:clear
:clear x
```

(h) `:load`

Loads and executes the supplied a Mech file(s) into the session.

```sh
:load my_script.mec
:load my_script.mec my_other_script.mec
:load my_directory
```

(i) `:ls [PATH]`

Lists contents of working directory. Optionally, provide a target path.

```sh
>: :ls
>: :ls /my/directory
```

(j) `:cd PATH`

Changes the current working directory.

```sh
>: :cd /my/directory
```

(k) `:step [N]`

Iterates the execution plan by the specified number of steps. If N is not provided, defaults to 1 step.

```sh
>: ~x := 10
>: x += 1
>: :step 10
>: x == 21  -- true
```